openapi: 3.0.1
info:
  description: HYM API
  version: "0.0.1"
  title: Host Your Music API
  contact:
    email: rsouza01@gmail.com
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
security:
  - BearerAuth: []
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/hostyourmusic/main/1.0.0
tags:
  - name: signup
    description: Signup operations
  - name: users
    description: User CRUD related operations
  - name: subscriptions
    description: Subscriptions CRUD related operatoins
paths:
  /signup:
    post:
      operationId: "signup"
      tags:
      - "signup"
      summary: "Add a new user to the system via signup - Wrapper to /user (POST)"
      description: ""
      parameters:
      - $ref: "#/components/parameters/ApiVersion"
      - $ref: "#/components/parameters/Accept"
      - $ref: "#/components/parameters/MandatoryContentType"
      - $ref: "#/components/parameters/ContentLength"
      - $ref: "#/components/parameters/Authorization"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Creates a User.
        required: true
      responses:
        "201":
          description: __OK.__ User Created.
          headers:
            api-version:
              schema:
                maximum: 2
                minimum: 1
                type: integer
            Content-Length:
              schema:
                type: integer
            Content-Type:
              schema:
                maxLength: 64
                minLength: 1
                type: string
                pattern: '^[a-zA-Z0-9=/-;]*$'
            Last-Modified:
              description: Date and time at which the resource was last modified.
                Example 2020-10-15T12:10:10.123Z
              x-format: YYYY-MM-DDThh:mm:ss.sssZ
              x-valid-chars: ^[-0-9TZ:.]+$
              schema:
                maxLength: 64
                minLength: 1
                type: string
            transactionId:
              schema:
                maxLength: 64
                minLength: 1
                type: string
                pattern: '^[a-zA-Z0-9-]*$'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "422":
          $ref: "#/components/responses/422"
        "500":
          $ref: "#/components/responses/500"

  /users:
    post:
      operationId: "createUser"
      tags:
      - "users"
      summary: "Add a new user to the system"
      description: ""
      parameters:
      - $ref: "#/components/parameters/ApiVersion"
      - $ref: "#/components/parameters/Accept"
      - $ref: "#/components/parameters/MandatoryContentType"
      - $ref: "#/components/parameters/ContentLength"
      - $ref: "#/components/parameters/Authorization"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Creates a User.
        required: true
      responses:
        "201":
          description: __OK.__ User Created.
          headers:
            api-version:
              schema:
                maximum: 2
                minimum: 1
                type: integer
            Content-Length:
              schema:
                type: integer
            Content-Type:
              schema:
                maxLength: 64
                minLength: 1
                type: string
                pattern: '^[a-zA-Z0-9=/-;]*$'
            Last-Modified:
              description: Date and time at which the resource was last modified.
                Example 2020-10-15T12:10:10.123Z
              x-format: YYYY-MM-DDThh:mm:ss.sssZ
              x-valid-chars: ^[-0-9TZ:.]+$
              schema:
                maxLength: 64
                minLength: 1
                type: string
            transactionId:
              schema:
                maxLength: 64
                minLength: 1
                type: string
                pattern: '^[a-zA-Z0-9-]*$'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "422":
          $ref: "#/components/responses/422"
        "500":
          $ref: "#/components/responses/500"
    get:
      tags:
        - users
      summary: List users
      operationId: listUsers
      description: |
        By passing in the appropriate options, you can search for
        available users in the system
      parameters:
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: bad input parameter

  /users/{id}:
    put:
      operationId: "updateUser"
      tags:
      - "users"
      summary: "Update an existing user to the system"
      description: ""
      parameters:
      - $ref: "#/components/parameters/ApiVersion"
      - $ref: "#/components/parameters/Accept"
      - $ref: "#/components/parameters/MandatoryContentType"
      - $ref: "#/components/parameters/ContentLength"
      - $ref: "#/components/parameters/Authorization"
      - name: id
        in: path
        description: The id of the user.
        required: true
        schema:
          maxLength: 64
          minLength: 1
          type: string
          pattern: '^[a-zA-Z0-9-]*$'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Creates a User.
        required: true
      responses:
        "204":
          description: __OK.__ User updated.
          headers:
            api-version:
              schema:
                maximum: 2
                minimum: 1
                type: integer
            Content-Length:
              schema:
                type: integer
            Content-Type:
              schema:
                maxLength: 64
                minLength: 1
                type: string
                pattern: '^[a-zA-Z0-9=/-;]*$'
            Last-Modified:
              description: Date and time at which the resource was last modified.
                Example 2020-10-15T12:10:10.123Z
              x-format: YYYY-MM-DDThh:mm:ss.sssZ
              x-valid-chars: ^[-0-9TZ:.]+$
              schema:
                maxLength: 64
                minLength: 1
                type: string
            transactionId:
              schema:
                maxLength: 64
                minLength: 1
                type: string
                pattern: '^[a-zA-Z0-9-]*$'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "422":
          $ref: "#/components/responses/422"
        "500":
          $ref: "#/components/responses/500"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  responses:
    "400":
        description: __Bad request.__ The resource could not be parsed or failed
          basic validation rules.
        headers:
          api-version:
            schema:
              type: integer
          Content-Length:
            schema:
              type: integer

          Content-Type:
            schema:
              maxLength: 64
              minLength: 1
              type: string
              pattern: '^[a-zA-Z0-9=/-;]*$'
          transactionId:
            schema:
              maxLength: 64
              minLength: 1
              type: string
              pattern: '^[a-zA-Z0-9-]*$'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiResponse'
    "401":
        description: __Unauthorized.__ The request requires authentication. A caller
          should re-signon and come back with new token.
        headers:
          api-version:
            schema:
              maximum: 2
              minimum: 1
              type: integer
          Content-Length:
            schema:
              type: integer

          Content-Type:
            schema:
              maxLength: 64
              minLength: 1
              type: string
              pattern: '^[a-zA-Z0-9=/-;]*$'
          transactionId:
            schema:
              maxLength: 64
              minLength: 1
              type: string
              pattern: '^[a-zA-Z0-9-]*$'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiResponse'
    "403":
        description: __Forbidden.__ The provided credentials do not allow for the
          operation. A re-signon will not help.
        headers:
          api-version:
            schema:
              maximum: 2
              minimum: 1
              type: integer
          Content-Length:
            schema:
              type: integer

          Content-Type:
            schema:
              maxLength: 64
              minLength: 1
              type: string
              pattern: '^[a-zA-Z0-9=/-;]*$'
          transactionId:
            schema:
              maxLength: 64
              minLength: 1
              type: string
              pattern: '^[a-zA-Z0-9-]*$'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiResponse'
    "404":
        description: __Not Found.__ The requested resource was not found on the
          server.
        headers:
          api-version:
            schema:
              maximum: 2
              minimum: 1
              type: integer
          Content-Length:
            schema:
              type: integer

          Content-Type:
            schema:
              maxLength: 64
              minLength: 1
              type: string
              pattern: '^[a-zA-Z0-9=/-;]*$'
          transactionId:
            schema:
              maxLength: 64
              minLength: 1
              type: string
              pattern: '^[a-zA-Z0-9-]*$'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiResponse'
    "406":
      description: __Not Acceptable.__ The resource identified by the request
        is only capable of generating response entities which have content characteristics
        not acceptable according to the accept headers sent in the request.
      headers:
        api-version:
          schema:
            maximum: 2
            minimum: 1
            type: integer
        Content-Length:
          schema:
            type: integer
        Content-Type:
          schema:
            maxLength: 64
            minLength: 1
            type: string
            pattern: '^[a-zA-Z0-9=/-;]*$'
        transactionId:
          schema:
            maxLength: 64
            minLength: 1
            type: string
            pattern: '^[a-zA-Z0-9-]*$'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    "422":
      description: __Unprocessable Entity.__ The request was well-formed but was unable to be followed due to semantic errors.
      headers:
        api-version:
          schema:
            maximum: 2
            minimum: 1
            type: integer
        Content-Length:
          schema:
            type: integer
        Content-Type:
          schema:
            maxLength: 64
            minLength: 1
            type: string
            pattern: '^[a-zA-Z0-9=/-;]*$'
        transactionId:
          schema:
            maxLength: 64
            minLength: 1
            type: string
            pattern: '^[a-zA-Z0-9-]*$'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    "500":
      description: __Internal Server Error.__
      headers:
        api-version:
          schema:
            maximum: 2
            minimum: 1
            type: integer
        Content-Length:
          schema:
            type: integer
        Content-Type:
          schema:
            maxLength: 64
            minLength: 1
            type: string
            pattern: '^[a-zA-Z0-9=/-;]*$'
        transactionId:
          schema:
            maxLength: 64
            minLength: 1
            type: string
            pattern: '^[a-zA-Z0-9-]*$'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
  schemas:
    Tag:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
      xml:
        name: "Tag"
    ApiResponse:
      title: ApiResponse
      required:
      - issue
      - resourceType
      type: object
      properties:
        resourceType:
          type: string
      description: A collection of error, warning or information messages that result
        from a system action. Returned only in case of an API call failure.
    User:
      type: "object"
      required:
      - "name"
      - "photoUrls"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
          example: "doggie"
        tags:
          type: "array"
          xml:
            name: "tag"
            wrapped: true
          items:
            $ref: "#/components/schemas/Tag"
        status:
          type: "string"
          description: "User status"
          enum:
          - "enabled"
          - "disabled"
    Subscription:
      type: object
      properties:
        id:
          type: integer
          format: int64
      description: "\tSubscription grouping users"
    Schema:
      description: S
  parameters:
    ApiVersion:
      name: api-version
      in: header
      description: |
        API Version.
        Version of this API. Different version numbers represent API
        changes that are incompatible with each other.
      required: true
      schema:
        type: integer
        enum: [2]
    Accept:
      name: accept
      in: header
      schema:
        type: string
        default: 'application/json'
        enum: [ 'application/json' ]
    MandatoryContentType:
      name: Content-Type
      in: header
      required: true
      schema:
        type: string
        default: 'application/json'
        enum: [ 'application/json' ]
    OptionalContentType:
      name: Content-Type
      in: header
      schema:
        type: string
        default: 'application/json'
        enum: [ 'application/json' ]
    ContentLength:
      name: Content-Length
      in: header
      description: |
        Content-Length of the response body
      schema:
        type: integer
    Authorization:
      name: Authorization
      in: header
      description: >
        Authorization header containing the callers access token as **Bearer**, as specified in the RFC 6750.
      required: true
      schema:
        type: string
